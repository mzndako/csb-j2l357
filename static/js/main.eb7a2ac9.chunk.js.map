{"version":3,"sources":["AlgorandUtils.tsx","App.tsx","index.tsx"],"names":["client","algosdk","createPaymentTransaction","address","getTransactionParams","do","params","transaction","from","to","amount","suggestedParams","toByte","getBasicProgramBytes","compile","compiledProgram","Uint8Array","Buffer","result","createApplCreateTransaction","onComplete","NoOpOC","approvalProgram","clearProgram","numLocalInts","numLocalByteSlices","numGlobalInts","numGlobalByteSlices","appArgs","createTxn","createApplOptInTransaction","appId","Error","optInTxn","createApplOptOutTransaction","closeOutTxn","createApplUpdateTransaction","updateTxn","createApplDeleteTransaction","deleteTxn","waitForConfirmation","txId","timeout","status","undefined","startround","currentround","pendingTransactionInformation","pendingInfo","length","statusAfterBlock","App","provider","window","exodus","algorand","open","getProvider","useState","logs","setLogs","addLog","useCallback","log","console","setConnected","setAddress","createdAppId","setCreatedAppId","optedInAppId","setOptedInAppId","useEffect","connect","catch","err","then","a","disconnect","signTransaction","signedTransactions","Promise","all","transaction1","JSON","stringify","warn","signAndSendTransaction","transactions","signAndSendApplCreateTransaction","confirmedTx","toString","signAndSendApplUpdateTransaction","signAndSendApplOptInTransaction","signAndSendApplOptOutTransaction","signAndSendApplDeleteTransaction","className","onClick","map","i","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.eb7a2ac9.chunk.js","sourcesContent":["import * as algosdk from \"algosdk\";\nimport { Buffer } from \"buffer\";\n\nconst TOKEN = \"\";\nconst SERVER = \"https://node.algoexplorerapi.io/\";\nconst PORT = 443;\n\nconst client = new algosdk.Algodv2(TOKEN, SERVER, PORT);\n\nexport const createPaymentTransaction = async (address) => {\n  const params = await client.getTransactionParams().do();\n  const transaction = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n    from: address,\n    to: address,\n    amount: 100000, // Equals 0.1 ALGO\n    suggestedParams: params,\n  });\n  return transaction.toByte();\n};\n\nexport const getBasicProgramBytes = async () => {\n  const program = \"#pragma version 2\\nint 1\";\n\n  // use algod to compile the program\n  const compiledProgram = await client.compile(program).do();\n  return new Uint8Array(Buffer.from(compiledProgram.result, \"base64\"));\n};\n\nexport const createApplCreateTransaction = async (from) => {\n  const onComplete = algosdk.OnApplicationComplete.NoOpOC;\n  const approvalProgram = await getBasicProgramBytes();\n  const clearProgram = await getBasicProgramBytes();\n  const numLocalInts = 1;\n  const numLocalByteSlices = 1;\n  const numGlobalInts = 1;\n  const numGlobalByteSlices = 1;\n  const appArgs = [];\n\n  // get suggested params\n  const suggestedParams = await client.getTransactionParams().do();\n\n  // create the application creation transaction\n  const createTxn = algosdk.makeApplicationCreateTxn(\n    from,\n    suggestedParams,\n    onComplete,\n    approvalProgram,\n    clearProgram,\n    numLocalInts,\n    numLocalByteSlices,\n    numGlobalInts,\n    numGlobalByteSlices,\n    appArgs\n  );\n  return createTxn.toByte();\n};\n\nexport const createApplOptInTransaction = async (from, appId) => {\n  if (!appId) {\n    throw new Error(\"No appId supplied, create application before opting in\");\n  }\n  // get suggested params\n  const suggestedParams = await client.getTransactionParams().do();\n  const appArgs = [];\n\n  // create the application opt out transaction\n  const optInTxn = algosdk.makeApplicationOptInTxn(\n    from,\n    suggestedParams,\n    appId,\n    appArgs\n  );\n  return optInTxn.toByte();\n};\n\nexport const createApplOptOutTransaction = async (from, appId) => {\n  if (!appId) {\n    throw new Error(\n      \"No appId supplied, create application and opt in before opting out\"\n    );\n  }\n\n  // get suggested params\n  const suggestedParams = await client.getTransactionParams().do();\n  const appArgs = [];\n\n  // create the application opt out transaction\n  const closeOutTxn = algosdk.makeApplicationCloseOutTxn(\n    from,\n    suggestedParams,\n    appId,\n    appArgs\n  );\n  return closeOutTxn.toByte();\n};\n\nexport const createApplUpdateTransaction = async (from, appId) => {\n  if (!appId) {\n    throw new Error(\"No appId supplied, create application before updating\");\n  }\n  const approvalProgram = await getBasicProgramBytes();\n  const clearProgram = await getBasicProgramBytes();\n  const appArgs = [];\n\n  // get suggested params\n  const suggestedParams = await client.getTransactionParams().do();\n\n  // create the application update transaction\n  const updateTxn = algosdk.makeApplicationUpdateTxn(\n    from,\n    suggestedParams,\n    appId,\n    approvalProgram,\n    clearProgram,\n    appArgs\n  );\n  return updateTxn.toByte();\n};\n\nexport const createApplDeleteTransaction = async (from, appId) => {\n  if (!appId) {\n    throw new Error(\"No appId supplied, create application before deleting\");\n  }\n  // get suggested params\n  const suggestedParams = await client.getTransactionParams().do();\n\n  // create the application deletion transaction\n  const deleteTxn = algosdk.makeApplicationDeleteTxn(\n    from,\n    suggestedParams,\n    appId\n  );\n  return deleteTxn.toByte();\n};\n\nexport const waitForConfirmation = async function (txId, timeout) {\n  if (client == null || txId == null || timeout < 0) {\n    throw new Error(\"Bad arguments\");\n  }\n\n  const status = await client.status().do();\n  if (status === undefined) {\n    throw new Error(\"Unable to get node status\");\n  }\n\n  const startround = status[\"last-round\"] + 1;\n  let currentround = startround;\n\n  while (currentround < startround + timeout) {\n    const pendingInfo = await client.pendingTransactionInformation(txId).do();\n    if (pendingInfo !== undefined) {\n      if (\n        pendingInfo[\"confirmed-round\"] !== null &&\n        pendingInfo[\"confirmed-round\"] > 0\n      ) {\n        //Got the completed Transaction\n        return pendingInfo;\n      } else {\n        if (\n          pendingInfo[\"pool-error\"] != null &&\n          pendingInfo[\"pool-error\"].length > 0\n        ) {\n          // If there was a pool error, then the transaction has been rejected!\n          throw new Error(\n            \"Transaction \" +\n              txId +\n              \" rejected - pool error: \" +\n              pendingInfo[\"pool-error\"]\n          );\n        }\n      }\n    }\n    await client.statusAfterBlock(currentround).do();\n    currentround++;\n  }\n\n  throw new Error(\n    \"Transaction \" + txId + \" not confirmed after \" + timeout + \" rounds!\"\n  );\n};\n","import { useState, useEffect, useCallback } from \"react\";\nimport {\n  createPaymentTransaction,\n  createApplCreateTransaction,\n  createApplUpdateTransaction,\n  createApplOptInTransaction,\n  createApplOptOutTransaction,\n  createApplDeleteTransaction,\n  waitForConfirmation,\n} from \"./AlgorandUtils\";\nimport \"./styles.css\";\n\ntype ExodusEvent = \"connect\" | \"disconnect\";\ntype ExodusRequestMethod =\n  | \"connect\"\n  | \"disconnect\"\n  | \"signTransaction\"\n  | \"signAndSendTransaction\";\n\ninterface ExodusProvider {\n  address: string | null;\n  isConnected: boolean | null;\n  signTransaction: (transaction: any[]) => Promise<Uint8Array[]>;\n  signAndSendTransaction: (transactions: any[]) => Promise<{ txId: string }>;\n  connect: () => Promise<{ address: string }>;\n  disconnect: () => Promise<void>;\n  on: (event: ExodusEvent, handler: (args: any) => void) => void;\n  request: (method: ExodusRequestMethod, params: any) => Promise<unknown>;\n}\n\nconst getProvider = (): ExodusProvider | undefined => {\n  if (\"exodus\" in window) {\n    const anyWindow: any = window;\n    return anyWindow.exodus.algorand;\n  }\n\n  window.open(\"https://exodus.com\", \"_blank\");\n};\n\nexport default function App() {\n  const provider = getProvider();\n  const [logs, setLogs] = useState<string[]>([]);\n  const addLog = useCallback((log: string) => {\n    console.log(log);\n    setLogs((logs) => [...logs, \"> \" + log]);\n  }, []);\n  const [, setConnected] = useState<boolean>(false);\n  const [address, setAddress] = useState<string | null>(null);\n  const [createdAppId, setCreatedAppId] = useState<number | null>(null);\n  const [optedInAppId, setOptedInAppId] = useState<number | null>(null);\n  useEffect(() => {\n    if (!provider) return;\n    // try to eagerly connect\n    provider.connect().catch((err) => {\n      // fail silently\n    }).then((a: any) => {\n      setAddress(a.address);\n      setConnected(true);\n      addLog(\"[connect] \" + address);\n    });\n    // provider.on(\"connect\", (address: string) => {\n    //   setAddress(address);\n    //   setConnected(true);\n    //   addLog(\"[connect] \" + address);\n    // });\n    // provider.on(\"disconnect\", () => {\n    //   setAddress(null);\n    //   setConnected(false);\n    //   addLog(\"[disconnect] 👋\");\n    // });\n    return () => {\n      provider.disconnect();\n    };\n  }, [provider, addLog]);\n  if (!provider) {\n    return <h2>Could not find a provider</h2>;\n  }\n\n  const signTransaction = async () => {\n    let signedTransactions = [];\n    try {\n      const [transaction1] = await Promise.all([\n        createPaymentTransaction(provider.address),\n      ]);\n      if (transaction1) {\n        signedTransactions = await provider.signTransaction([transaction1]);\n        addLog(\n          \"signTransaction signedTransactions: \" +\n            JSON.stringify(signedTransactions)\n        );\n      }\n    } catch (err) {\n      console.warn(err);\n      addLog(\"[error] signTransactions: \" + JSON.stringify(err));\n    }\n    return signedTransactions;\n  };\n\n  const signAndSendTransaction = async () => {\n    try {\n      const transactions = await Promise.all([\n        createPaymentTransaction(provider.address),\n      ]);\n      const { txId } = await provider.signAndSendTransaction(transactions);\n      addLog(\"Sending transaction \" + txId + \", awaiting confirmation\");\n      await waitForConfirmation(txId, 10);\n      addLog(\"Transaction \" + txId + \" confirmed\");\n    } catch (err) {\n      console.warn(err);\n      addLog(\"[error] signAndSendTransaction: \" + JSON.stringify(err));\n    }\n  };\n\n  const signAndSendApplCreateTransaction = async () => {\n    let signedTransactions = [];\n    try {\n      const transactions = await Promise.all([\n        createApplCreateTransaction(provider.address),\n      ]);\n      if (transactions) {\n        const { txId } = await provider.signAndSendTransaction(transactions);\n        addLog(\"Sending transaction \" + txId + \", awaiting confirmation\");\n        const confirmedTx = await waitForConfirmation(txId, 10);\n        addLog(\"Transaction \" + txId + \" confirmed\");\n        const appId = confirmedTx[\"application-index\"];\n        addLog(\"Created application with appId \" + appId);\n        setCreatedAppId(appId);\n      }\n    } catch (err) {\n      console.warn(err);\n      addLog(\n        \"[error] signAndSendApplCreateTransaction: \" +\n          err.toString() +\n          \" \" +\n          JSON.stringify(err)\n      );\n    }\n    return signedTransactions;\n  };\n\n  const signAndSendApplUpdateTransaction = async () => {\n    let signedTransactions = [];\n    try {\n      const transactions = await Promise.all([\n        createApplUpdateTransaction(provider.address, createdAppId),\n      ]);\n      if (transactions) {\n        const { txId } = await provider.signAndSendTransaction(transactions);\n        addLog(\"Sending transaction \" + txId + \", awaiting confirmation\");\n        await waitForConfirmation(txId, 10);\n        addLog(\"Transaction \" + txId + \" confirmed\");\n        addLog(\"Updated application with appId \" + createdAppId);\n      }\n    } catch (err) {\n      console.warn(err);\n      addLog(\n        \"[error] signAndSendApplUpdateTransaction: \" +\n          err.toString() +\n          \" \" +\n          JSON.stringify(err)\n      );\n    }\n    return signedTransactions;\n  };\n\n  const signAndSendApplOptInTransaction = async () => {\n    let signedTransactions = [];\n    try {\n      const transactions = await Promise.all([\n        createApplOptInTransaction(provider.address, createdAppId),\n      ]);\n      if (transactions) {\n        const { txId } = await provider.signAndSendTransaction(transactions);\n        addLog(\"Sending transaction \" + txId + \", awaiting confirmation\");\n        await waitForConfirmation(txId, 10);\n        addLog(\"Transaction \" + txId + \" confirmed\");\n        addLog(\"Opted In application with appId \" + createdAppId);\n        setOptedInAppId(createdAppId);\n      }\n    } catch (err) {\n      console.warn(err);\n      addLog(\n        \"[error] signAndSendApplOptinTransaction: \" +\n          err.toString() +\n          \" \" +\n          JSON.stringify(err)\n      );\n    }\n    return signedTransactions;\n  };\n\n  const signAndSendApplOptOutTransaction = async () => {\n    let signedTransactions = [];\n    try {\n      const transactions = await Promise.all([\n        createApplOptOutTransaction(provider.address, optedInAppId),\n      ]);\n      if (transactions) {\n        const { txId } = await provider.signAndSendTransaction(transactions);\n        addLog(\"Sending transaction \" + txId + \", awaiting confirmation\");\n        await waitForConfirmation(txId, 10);\n        addLog(\"Transaction \" + txId + \" confirmed\");\n        addLog(\"Opted Out application with appId \" + optedInAppId);\n        setOptedInAppId(null);\n      }\n    } catch (err) {\n      console.warn(err);\n      addLog(\n        \"[error] signAndSendApplOptoutTransaction: \" +\n          err.toString() +\n          \" \" +\n          JSON.stringify(err)\n      );\n    }\n    return signedTransactions;\n  };\n\n  const signAndSendApplDeleteTransaction = async () => {\n    let signedTransactions = [];\n    try {\n      const transactions = await Promise.all([\n        createApplDeleteTransaction(provider.address, createdAppId),\n      ]);\n      if (transactions) {\n        const { txId } = await provider.signAndSendTransaction(transactions);\n        addLog(\"Sending transaction \" + txId + \", awaiting confirmation\");\n        await waitForConfirmation(txId, 10);\n        addLog(\"Transaction \" + txId + \" confirmed\");\n        addLog(\"Deleted application with appId \" + createdAppId);\n        setCreatedAppId(null);\n        setOptedInAppId(null);\n      }\n    } catch (err) {\n      console.warn(err);\n      addLog(\n        \"[error] signAndSendApplDeleteTransaction: \" +\n          err.toString() +\n          \" \" +\n          JSON.stringify(err)\n      );\n    }\n    return signedTransactions;\n  };\n\n  return (\n    <div className=\"App\">\n      <main>\n        <h1>Exodus Sandbox</h1>\n        {provider && address ? (\n          <>\n            <div>\n              <pre>Connected as</pre>\n              <br />\n              <pre>{address}</pre>\n              <br />\n            </div>\n            <button onClick={signTransaction}>Sign Transaction</button>\n            <button onClick={signAndSendTransaction}>\n              Sign And Send Transaction\n            </button>\n            <button onClick={signAndSendApplCreateTransaction}>\n              Sign And Send Application Create Transaction\n            </button>\n            <button onClick={signAndSendApplOptInTransaction}>\n              Sign And Send Application Opt In Transaction\n            </button>\n            <button onClick={signAndSendApplOptOutTransaction}>\n              Sign And Send Application Opt Out Transaction\n            </button>\n            <button onClick={signAndSendApplUpdateTransaction}>\n              Sign And Send Application Update Transaction\n            </button>\n            <button onClick={signAndSendApplDeleteTransaction}>\n              Sign And Send Application Delete Transaction\n            </button>\n            <button\n              onClick={async () => {\n                try {\n                  await provider.disconnect();\n                } catch (err) {\n                  console.warn(err);\n                  addLog(\"[error] disconnect: \" + JSON.stringify(err));\n                }\n              }}\n            >\n              Disconnect\n            </button>\n          </>\n        ) : (\n          <>\n            <button\n              onClick={async () => {\n                try {\n                  await provider.connect();\n                } catch (err) {\n                  console.warn(err);\n                  addLog(\"[error] connect: \" + JSON.stringify(err));\n                }\n              }}\n            >\n              Connect to Exodus\n            </button>\n          </>\n        )}\n      </main>\n      <footer className=\"logs\">\n        {logs.map((log, i) => (\n          <div className=\"log\" key={i}>\n            {log}\n          </div>\n        ))}\n      </footer>\n    </div>\n  );\n}\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}